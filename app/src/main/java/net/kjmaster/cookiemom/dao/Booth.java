/*
 * Copyright (c) 2014.  Author:Steven Dees(kjstevokjmaster@gmail.com)
 *
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net.kjmaster.cookiemom.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table BOOTH.
 */
@SuppressWarnings("ALL")
public class Booth {

    private Long id;
    private String boothLocation;
    private String boothAddress;
    private java.util.Date boothDate;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient BoothDao myDao;

    private List<BoothAssignments> scoutsAssigned;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Booth() {
    }

    public Booth(Long id) {
        this.id = id;
    }

    public Booth(Long id, String boothLocation, String boothAddress, java.util.Date boothDate) {
        this.id = id;
        this.boothLocation = boothLocation;
        this.boothAddress = boothAddress;
        this.boothDate = boothDate;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBoothDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBoothLocation() {
        return boothLocation;
    }

    public void setBoothLocation(String boothLocation) {
        this.boothLocation = boothLocation;
    }

    public String getBoothAddress() {
        return boothAddress;
    }

    public void setBoothAddress(String boothAddress) {
        this.boothAddress = boothAddress;
    }

    public java.util.Date getBoothDate() {
        return boothDate;
    }

    public void setBoothDate(java.util.Date boothDate) {
        this.boothDate = boothDate;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<BoothAssignments> getScoutsAssigned() {
        if (scoutsAssigned == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BoothAssignmentsDao targetDao = daoSession.getBoothAssignmentsDao();
            List<BoothAssignments> scoutsAssignedNew = targetDao._queryBooth_ScoutsAssigned(id);
            synchronized (this) {
                if (scoutsAssigned == null) {
                    scoutsAssigned = scoutsAssignedNew;
                }
            }
        }
        return scoutsAssigned;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetScoutsAssigned() {
        scoutsAssigned = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return this.getBoothLocation();
    }
    // KEEP METHODS END

}
