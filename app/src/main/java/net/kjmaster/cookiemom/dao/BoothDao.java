/*
 * Copyright (c) 2014.  Author:Steven Dees(kjstevokjmaster@gmail.com)
 *
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net.kjmaster.cookiemom.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table BOOTH.
 */
@SuppressWarnings("ALL")
public class BoothDao extends AbstractDao<Booth, Long> {

    public static final String TABLENAME = "BOOTH";

    /**
     * Properties of entity Booth.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BoothLocation = new Property(1, String.class, "boothLocation", false, "BOOTH_LOCATION");
        public final static Property BoothAddress = new Property(2, String.class, "boothAddress", false, "BOOTH_ADDRESS");
        public final static Property BoothDate = new Property(3, java.util.Date.class, "boothDate", false, "BOOTH_DATE");
    }

    ;

    private DaoSession daoSession;


    public BoothDao(DaoConfig config) {
        super(config);
    }

    public BoothDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOTH' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BOOTH_LOCATION' TEXT," + // 1: boothLocation
                "'BOOTH_ADDRESS' TEXT," + // 2: boothAddress
                "'BOOTH_DATE' INTEGER);"); // 3: boothDate
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOTH'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Booth entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String boothLocation = entity.getBoothLocation();
        if (boothLocation != null) {
            stmt.bindString(2, boothLocation);
        }

        String boothAddress = entity.getBoothAddress();
        if (boothAddress != null) {
            stmt.bindString(3, boothAddress);
        }

        java.util.Date boothDate = entity.getBoothDate();
        if (boothDate != null) {
            stmt.bindLong(4, boothDate.getTime());
        }
    }

    @Override
    protected void attachEntity(Booth entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Booth readEntity(Cursor cursor, int offset) {
        Booth entity = new Booth( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // boothLocation
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // boothAddress
                cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // boothDate
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Booth entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBoothLocation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBoothAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBoothDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Booth entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Booth entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
