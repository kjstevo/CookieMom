package net.kmaster.cookiemom.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table COOKIE_TRANSACTIONS.
 */
public class CookieTransactionsDao extends AbstractDao<CookieTransactions, Long> {

    public static final String TABLENAME = "COOKIE_TRANSACTIONS";

    /**
     * Properties of entity CookieTransactions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransScoutId = new Property(1, Long.class, "transScoutId", false, "TRANS_SCOUT_ID");
        public final static Property TransBoothId = new Property(2, Long.class, "transBoothId", false, "TRANS_BOOTH_ID");
        public final static Property CookieType = new Property(3, String.class, "cookieType", false, "COOKIE_TYPE");
        public final static Property TransBoxes = new Property(4, Integer.class, "transBoxes", false, "TRANS_BOXES");
        public final static Property TransDate = new Property(5, java.util.Date.class, "transDate", false, "TRANS_DATE");
        public final static Property TransCash = new Property(6, Double.class, "transCash", false, "TRANS_CASH");
    }

    ;

    private DaoSession daoSession;

    private Query<CookieTransactions> scout_ScoutsCookieTransactionsQuery;

    public CookieTransactionsDao(DaoConfig config) {
        super(config);
    }

    public CookieTransactionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'COOKIE_TRANSACTIONS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TRANS_SCOUT_ID' INTEGER," + // 1: transScoutId
                "'TRANS_BOOTH_ID' INTEGER," + // 2: transBoothId
                "'COOKIE_TYPE' TEXT," + // 3: cookieType
                "'TRANS_BOXES' INTEGER," + // 4: transBoxes
                "'TRANS_DATE' INTEGER," + // 5: transDate
                "'TRANS_CASH' REAL);"); // 6: transCash
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COOKIE_TRANSACTIONS'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, CookieTransactions entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long transScoutId = entity.getTransScoutId();
        if (transScoutId != null) {
            stmt.bindLong(2, transScoutId);
        }

        Long transBoothId = entity.getTransBoothId();
        if (transBoothId != null) {
            stmt.bindLong(3, transBoothId);
        }

        String cookieType = entity.getCookieType();
        if (cookieType != null) {
            stmt.bindString(4, cookieType);
        }

        Integer transBoxes = entity.getTransBoxes();
        if (transBoxes != null) {
            stmt.bindLong(5, transBoxes);
        }

        java.util.Date transDate = entity.getTransDate();
        if (transDate != null) {
            stmt.bindLong(6, transDate.getTime());
        }

        Double transCash = entity.getTransCash();
        if (transCash != null) {
            stmt.bindDouble(7, transCash);
        }
    }

    @Override
    protected void attachEntity(CookieTransactions entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public CookieTransactions readEntity(Cursor cursor, int offset) {
        CookieTransactions entity = new CookieTransactions( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // transScoutId
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // transBoothId
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cookieType
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // transBoxes
                cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // transDate
                cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // transCash
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, CookieTransactions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransScoutId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTransBoothId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCookieType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTransBoxes(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTransDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setTransCash(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(CookieTransactions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(CookieTransactions entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "scoutsCookieTransactions" to-many relationship of Scout.
     */
    public List<CookieTransactions> _queryScout_ScoutsCookieTransactions(Long transScoutId) {
        synchronized (this) {
            if (scout_ScoutsCookieTransactionsQuery == null) {
                QueryBuilder<CookieTransactions> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TransScoutId.eq(null));
                queryBuilder.orderRaw("TRANS_DATE ASC");
                scout_ScoutsCookieTransactionsQuery = queryBuilder.build();
            }
        }
        Query<CookieTransactions> query = scout_ScoutsCookieTransactionsQuery.forCurrentThread();
        query.setParameter(0, transScoutId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getScoutDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBoothDao().getAllColumns());
            builder.append(" FROM COOKIE_TRANSACTIONS T");
            builder.append(" LEFT JOIN SCOUT T0 ON T.'TRANS_SCOUT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN BOOTH T1 ON T.'TRANS_BOOTH_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected CookieTransactions loadCurrentDeep(Cursor cursor, boolean lock) {
        CookieTransactions entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Scout scout = loadCurrentOther(daoSession.getScoutDao(), cursor, offset);
        entity.setScout(scout);
        offset += daoSession.getScoutDao().getAllColumns().length;

        Booth booth = loadCurrentOther(daoSession.getBoothDao(), cursor, offset);
        entity.setBooth(booth);

        return entity;
    }

    public CookieTransactions loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<CookieTransactions> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CookieTransactions> list = new ArrayList<CookieTransactions>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<CookieTransactions> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }


    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<CookieTransactions> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

}
