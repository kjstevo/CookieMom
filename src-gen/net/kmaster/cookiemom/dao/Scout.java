package net.kmaster.cookiemom.dao;

import de.greenrobot.dao.DaoException;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table SCOUT.
 */
@SuppressWarnings("all")
public class Scout {

    private Long id;
    /**
     * Not-null value.
     */
    private String scoutName;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient ScoutDao myDao;

    private List<BoothAssignments> boothsAssigned;
    private List<CookieTransactions> scoutsCookieTransactions;
    private List<Order> scoutOrders;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Scout() {
    }

    public Scout(Long id) {
        this.id = id;
    }

    public Scout(Long id, String scoutName) {
        this.id = id;
        this.scoutName = scoutName;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getScoutDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Not-null value.
     */
    public String getScoutName() {
        return scoutName;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setScoutName(String scoutName) {
        this.scoutName = scoutName;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<BoothAssignments> getBoothsAssigned() {
        if (boothsAssigned == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BoothAssignmentsDao targetDao = daoSession.getBoothAssignmentsDao();
            List<BoothAssignments> boothsAssignedNew = targetDao._queryScout_BoothsAssigned(id);
            synchronized (this) {
                if (boothsAssigned == null) {
                    boothsAssigned = boothsAssignedNew;
                }
            }
        }
        return boothsAssigned;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetBoothsAssigned() {
        boothsAssigned = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<CookieTransactions> getScoutsCookieTransactions() {
        if (scoutsCookieTransactions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CookieTransactionsDao targetDao = daoSession.getCookieTransactionsDao();
            List<CookieTransactions> scoutsCookieTransactionsNew = targetDao._queryScout_ScoutsCookieTransactions(id);
            synchronized (this) {
                if (scoutsCookieTransactions == null) {
                    scoutsCookieTransactions = scoutsCookieTransactionsNew;
                }
            }
        }
        return scoutsCookieTransactions;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetScoutsCookieTransactions() {
        scoutsCookieTransactions = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<Order> getScoutOrders() {
        if (scoutOrders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderDao targetDao = daoSession.getOrderDao();
            List<Order> scoutOrdersNew = targetDao._queryScout_ScoutOrders(id);
            synchronized (this) {
                if (scoutOrders == null) {
                    scoutOrders = scoutOrdersNew;
                }
            }
        }
        return scoutOrders;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetScoutOrders() {
        scoutOrders = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return this.getScoutName();    //To change body of overridden methods use File | Settings | File Templates.
    }
    // KEEP METHODS END

}
